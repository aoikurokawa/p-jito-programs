//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct ChangeTipReceiver {
    pub config: solana_pubkey::Pubkey,

    pub old_tip_receiver: solana_pubkey::Pubkey,

    pub new_tip_receiver: solana_pubkey::Pubkey,

    pub block_builder: solana_pubkey::Pubkey,

    pub tip_payment_account0: solana_pubkey::Pubkey,

    pub tip_payment_account1: solana_pubkey::Pubkey,

    pub tip_payment_account2: solana_pubkey::Pubkey,

    pub tip_payment_account3: solana_pubkey::Pubkey,

    pub tip_payment_account4: solana_pubkey::Pubkey,

    pub tip_payment_account5: solana_pubkey::Pubkey,

    pub tip_payment_account6: solana_pubkey::Pubkey,

    pub tip_payment_account7: solana_pubkey::Pubkey,

    pub signer: solana_pubkey::Pubkey,
}

impl ChangeTipReceiver {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.config, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.old_tip_receiver,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.new_tip_receiver,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.block_builder,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.tip_payment_account0,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.tip_payment_account1,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.tip_payment_account2,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.tip_payment_account3,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.tip_payment_account4,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.tip_payment_account5,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.tip_payment_account6,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.tip_payment_account7,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.signer, true));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&ChangeTipReceiverInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::JITO_TIP_PAYMENT_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ChangeTipReceiverInstructionData {
    discriminator: u8,
}

impl ChangeTipReceiverInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 1 }
    }
}

impl Default for ChangeTipReceiverInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `ChangeTipReceiver`.
///
/// ### Accounts:
///
///   0. `[writable]` config
///   1. `[writable]` old_tip_receiver
///   2. `[writable]` new_tip_receiver
///   3. `[writable]` block_builder
///   4. `[writable]` tip_payment_account0
///   5. `[writable]` tip_payment_account1
///   6. `[writable]` tip_payment_account2
///   7. `[writable]` tip_payment_account3
///   8. `[writable]` tip_payment_account4
///   9. `[writable]` tip_payment_account5
///   10. `[writable]` tip_payment_account6
///   11. `[writable]` tip_payment_account7
///   12. `[writable, signer]` signer
#[derive(Clone, Debug, Default)]
pub struct ChangeTipReceiverBuilder {
    config: Option<solana_pubkey::Pubkey>,
    old_tip_receiver: Option<solana_pubkey::Pubkey>,
    new_tip_receiver: Option<solana_pubkey::Pubkey>,
    block_builder: Option<solana_pubkey::Pubkey>,
    tip_payment_account0: Option<solana_pubkey::Pubkey>,
    tip_payment_account1: Option<solana_pubkey::Pubkey>,
    tip_payment_account2: Option<solana_pubkey::Pubkey>,
    tip_payment_account3: Option<solana_pubkey::Pubkey>,
    tip_payment_account4: Option<solana_pubkey::Pubkey>,
    tip_payment_account5: Option<solana_pubkey::Pubkey>,
    tip_payment_account6: Option<solana_pubkey::Pubkey>,
    tip_payment_account7: Option<solana_pubkey::Pubkey>,
    signer: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ChangeTipReceiverBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn config(&mut self, config: solana_pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn old_tip_receiver(&mut self, old_tip_receiver: solana_pubkey::Pubkey) -> &mut Self {
        self.old_tip_receiver = Some(old_tip_receiver);
        self
    }
    #[inline(always)]
    pub fn new_tip_receiver(&mut self, new_tip_receiver: solana_pubkey::Pubkey) -> &mut Self {
        self.new_tip_receiver = Some(new_tip_receiver);
        self
    }
    #[inline(always)]
    pub fn block_builder(&mut self, block_builder: solana_pubkey::Pubkey) -> &mut Self {
        self.block_builder = Some(block_builder);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account0(
        &mut self,
        tip_payment_account0: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.tip_payment_account0 = Some(tip_payment_account0);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account1(
        &mut self,
        tip_payment_account1: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.tip_payment_account1 = Some(tip_payment_account1);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account2(
        &mut self,
        tip_payment_account2: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.tip_payment_account2 = Some(tip_payment_account2);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account3(
        &mut self,
        tip_payment_account3: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.tip_payment_account3 = Some(tip_payment_account3);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account4(
        &mut self,
        tip_payment_account4: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.tip_payment_account4 = Some(tip_payment_account4);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account5(
        &mut self,
        tip_payment_account5: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.tip_payment_account5 = Some(tip_payment_account5);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account6(
        &mut self,
        tip_payment_account6: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.tip_payment_account6 = Some(tip_payment_account6);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account7(
        &mut self,
        tip_payment_account7: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.tip_payment_account7 = Some(tip_payment_account7);
        self
    }
    #[inline(always)]
    pub fn signer(&mut self, signer: solana_pubkey::Pubkey) -> &mut Self {
        self.signer = Some(signer);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = ChangeTipReceiver {
            config: self.config.expect("config is not set"),
            old_tip_receiver: self.old_tip_receiver.expect("old_tip_receiver is not set"),
            new_tip_receiver: self.new_tip_receiver.expect("new_tip_receiver is not set"),
            block_builder: self.block_builder.expect("block_builder is not set"),
            tip_payment_account0: self
                .tip_payment_account0
                .expect("tip_payment_account0 is not set"),
            tip_payment_account1: self
                .tip_payment_account1
                .expect("tip_payment_account1 is not set"),
            tip_payment_account2: self
                .tip_payment_account2
                .expect("tip_payment_account2 is not set"),
            tip_payment_account3: self
                .tip_payment_account3
                .expect("tip_payment_account3 is not set"),
            tip_payment_account4: self
                .tip_payment_account4
                .expect("tip_payment_account4 is not set"),
            tip_payment_account5: self
                .tip_payment_account5
                .expect("tip_payment_account5 is not set"),
            tip_payment_account6: self
                .tip_payment_account6
                .expect("tip_payment_account6 is not set"),
            tip_payment_account7: self
                .tip_payment_account7
                .expect("tip_payment_account7 is not set"),
            signer: self.signer.expect("signer is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `change_tip_receiver` CPI accounts.
pub struct ChangeTipReceiverCpiAccounts<'a, 'b> {
    pub config: &'b solana_account_info::AccountInfo<'a>,

    pub old_tip_receiver: &'b solana_account_info::AccountInfo<'a>,

    pub new_tip_receiver: &'b solana_account_info::AccountInfo<'a>,

    pub block_builder: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account0: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account1: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account2: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account3: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account4: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account5: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account6: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account7: &'b solana_account_info::AccountInfo<'a>,

    pub signer: &'b solana_account_info::AccountInfo<'a>,
}

/// `change_tip_receiver` CPI instruction.
pub struct ChangeTipReceiverCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub config: &'b solana_account_info::AccountInfo<'a>,

    pub old_tip_receiver: &'b solana_account_info::AccountInfo<'a>,

    pub new_tip_receiver: &'b solana_account_info::AccountInfo<'a>,

    pub block_builder: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account0: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account1: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account2: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account3: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account4: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account5: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account6: &'b solana_account_info::AccountInfo<'a>,

    pub tip_payment_account7: &'b solana_account_info::AccountInfo<'a>,

    pub signer: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> ChangeTipReceiverCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: ChangeTipReceiverCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            old_tip_receiver: accounts.old_tip_receiver,
            new_tip_receiver: accounts.new_tip_receiver,
            block_builder: accounts.block_builder,
            tip_payment_account0: accounts.tip_payment_account0,
            tip_payment_account1: accounts.tip_payment_account1,
            tip_payment_account2: accounts.tip_payment_account2,
            tip_payment_account3: accounts.tip_payment_account3,
            tip_payment_account4: accounts.tip_payment_account4,
            tip_payment_account5: accounts.tip_payment_account5,
            tip_payment_account6: accounts.tip_payment_account6,
            tip_payment_account7: accounts.tip_payment_account7,
            signer: accounts.signer,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.config.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.old_tip_receiver.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.new_tip_receiver.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.block_builder.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.tip_payment_account0.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.tip_payment_account1.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.tip_payment_account2.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.tip_payment_account3.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.tip_payment_account4.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.tip_payment_account5.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.tip_payment_account6.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.tip_payment_account7.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.signer.key, true));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&ChangeTipReceiverInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::JITO_TIP_PAYMENT_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(14 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.old_tip_receiver.clone());
        account_infos.push(self.new_tip_receiver.clone());
        account_infos.push(self.block_builder.clone());
        account_infos.push(self.tip_payment_account0.clone());
        account_infos.push(self.tip_payment_account1.clone());
        account_infos.push(self.tip_payment_account2.clone());
        account_infos.push(self.tip_payment_account3.clone());
        account_infos.push(self.tip_payment_account4.clone());
        account_infos.push(self.tip_payment_account5.clone());
        account_infos.push(self.tip_payment_account6.clone());
        account_infos.push(self.tip_payment_account7.clone());
        account_infos.push(self.signer.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ChangeTipReceiver` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` config
///   1. `[writable]` old_tip_receiver
///   2. `[writable]` new_tip_receiver
///   3. `[writable]` block_builder
///   4. `[writable]` tip_payment_account0
///   5. `[writable]` tip_payment_account1
///   6. `[writable]` tip_payment_account2
///   7. `[writable]` tip_payment_account3
///   8. `[writable]` tip_payment_account4
///   9. `[writable]` tip_payment_account5
///   10. `[writable]` tip_payment_account6
///   11. `[writable]` tip_payment_account7
///   12. `[writable, signer]` signer
#[derive(Clone, Debug)]
pub struct ChangeTipReceiverCpiBuilder<'a, 'b> {
    instruction: Box<ChangeTipReceiverCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ChangeTipReceiverCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ChangeTipReceiverCpiBuilderInstruction {
            __program: program,
            config: None,
            old_tip_receiver: None,
            new_tip_receiver: None,
            block_builder: None,
            tip_payment_account0: None,
            tip_payment_account1: None,
            tip_payment_account2: None,
            tip_payment_account3: None,
            tip_payment_account4: None,
            tip_payment_account5: None,
            tip_payment_account6: None,
            tip_payment_account7: None,
            signer: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn config(&mut self, config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn old_tip_receiver(
        &mut self,
        old_tip_receiver: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.old_tip_receiver = Some(old_tip_receiver);
        self
    }
    #[inline(always)]
    pub fn new_tip_receiver(
        &mut self,
        new_tip_receiver: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.new_tip_receiver = Some(new_tip_receiver);
        self
    }
    #[inline(always)]
    pub fn block_builder(
        &mut self,
        block_builder: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.block_builder = Some(block_builder);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account0(
        &mut self,
        tip_payment_account0: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tip_payment_account0 = Some(tip_payment_account0);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account1(
        &mut self,
        tip_payment_account1: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tip_payment_account1 = Some(tip_payment_account1);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account2(
        &mut self,
        tip_payment_account2: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tip_payment_account2 = Some(tip_payment_account2);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account3(
        &mut self,
        tip_payment_account3: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tip_payment_account3 = Some(tip_payment_account3);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account4(
        &mut self,
        tip_payment_account4: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tip_payment_account4 = Some(tip_payment_account4);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account5(
        &mut self,
        tip_payment_account5: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tip_payment_account5 = Some(tip_payment_account5);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account6(
        &mut self,
        tip_payment_account6: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tip_payment_account6 = Some(tip_payment_account6);
        self
    }
    #[inline(always)]
    pub fn tip_payment_account7(
        &mut self,
        tip_payment_account7: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tip_payment_account7 = Some(tip_payment_account7);
        self
    }
    #[inline(always)]
    pub fn signer(&mut self, signer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.signer = Some(signer);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = ChangeTipReceiverCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            old_tip_receiver: self
                .instruction
                .old_tip_receiver
                .expect("old_tip_receiver is not set"),

            new_tip_receiver: self
                .instruction
                .new_tip_receiver
                .expect("new_tip_receiver is not set"),

            block_builder: self
                .instruction
                .block_builder
                .expect("block_builder is not set"),

            tip_payment_account0: self
                .instruction
                .tip_payment_account0
                .expect("tip_payment_account0 is not set"),

            tip_payment_account1: self
                .instruction
                .tip_payment_account1
                .expect("tip_payment_account1 is not set"),

            tip_payment_account2: self
                .instruction
                .tip_payment_account2
                .expect("tip_payment_account2 is not set"),

            tip_payment_account3: self
                .instruction
                .tip_payment_account3
                .expect("tip_payment_account3 is not set"),

            tip_payment_account4: self
                .instruction
                .tip_payment_account4
                .expect("tip_payment_account4 is not set"),

            tip_payment_account5: self
                .instruction
                .tip_payment_account5
                .expect("tip_payment_account5 is not set"),

            tip_payment_account6: self
                .instruction
                .tip_payment_account6
                .expect("tip_payment_account6 is not set"),

            tip_payment_account7: self
                .instruction
                .tip_payment_account7
                .expect("tip_payment_account7 is not set"),

            signer: self.instruction.signer.expect("signer is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ChangeTipReceiverCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    config: Option<&'b solana_account_info::AccountInfo<'a>>,
    old_tip_receiver: Option<&'b solana_account_info::AccountInfo<'a>>,
    new_tip_receiver: Option<&'b solana_account_info::AccountInfo<'a>>,
    block_builder: Option<&'b solana_account_info::AccountInfo<'a>>,
    tip_payment_account0: Option<&'b solana_account_info::AccountInfo<'a>>,
    tip_payment_account1: Option<&'b solana_account_info::AccountInfo<'a>>,
    tip_payment_account2: Option<&'b solana_account_info::AccountInfo<'a>>,
    tip_payment_account3: Option<&'b solana_account_info::AccountInfo<'a>>,
    tip_payment_account4: Option<&'b solana_account_info::AccountInfo<'a>>,
    tip_payment_account5: Option<&'b solana_account_info::AccountInfo<'a>>,
    tip_payment_account6: Option<&'b solana_account_info::AccountInfo<'a>>,
    tip_payment_account7: Option<&'b solana_account_info::AccountInfo<'a>>,
    signer: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
